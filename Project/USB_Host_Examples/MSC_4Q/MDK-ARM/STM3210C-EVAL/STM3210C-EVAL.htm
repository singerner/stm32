<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM3210C-EVAL\STM3210C-EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM3210C-EVAL\STM3210C-EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Tue Nov 10 08:40:33 2015
<BR><P>
<H3>Maximum Stack Usage =        308 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; get_disp_state &rArr; refresh_display_type &rArr; add_line_info
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32fxxx_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[48]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32fxxx_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from stm32fxxx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32fxxx_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32fxxx_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32fxxx_it.o(i.NMI_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[49]">OTG_FS_IRQHandler</a> from stm32fxxx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from stm32fxxx_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">SPI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32fxxx_it.o(i.SVC_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from stm32fxxx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from remote.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[38]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from stm32fxxx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">UART5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from stm32fxxx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[2]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[0]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32fxxx_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from wwdg.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[52]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ce]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[cf]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DispString
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DispString
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line_from_flash
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disp_state
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;six_protocal
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_display_type
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rear_process
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cfg_from_flash
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;front_process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;five_protocal
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Busy_Check</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_flash.o(i.Busy_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32fxxx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[c0]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_right_state
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_left_state
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_brake_state
</UL>

<P><STRONG><a name="[69]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_R_BLOCK
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_recv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_run
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_run
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_RowShiftOut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_ColShiftOut
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_R_BLOCK
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_RowShiftOut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_ColShiftOut
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen
</UL>

<P><STRONG><a name="[5e]"></a>GetHZDot</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ziku.o(i.GetHZDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetHZDot &rArr; SST25_R_BLOCK &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_R_BLOCK
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DispString
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>LED_DispString</STRONG> (Thumb, 562 bytes, Stack size 80 bytes, led_screen.o(i.LED_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LED_DispString &rArr; ScrollRefreshLEDScreen1 &rArr; ShT_LEDBoard_RowShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHZDot
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>LED_ScrollDispHZ</STRONG> (Thumb, 792 bytes, Stack size 96 bytes, led_screen.o(i.LED_ScrollDispHZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LED_ScrollDispHZ &rArr; ScrollRefreshLEDScreen &rArr; ShT_LEDBoard_RowShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_right_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_left_state
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_brake_state
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHZDot
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
</UL>

<P><STRONG><a name="[c3]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[b9]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
</UL>

<P><STRONG><a name="[6e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[8e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[5b]"></a>RDSR</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_flash.o(i.RDSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
</UL>

<P><STRONG><a name="[71]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[6d]"></a>SPI_Flash_Init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, spi_flash.o(i.SPI_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Flash_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>SPI_Flash_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_flash.o(i.SPI_Flash_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Flash_ReadByte &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_R_BLOCK
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
</UL>

<P><STRONG><a name="[6a]"></a>SPI_Flash_SendByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_Flash_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_R_BLOCK
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
</UL>

<P><STRONG><a name="[72]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>

<P><STRONG><a name="[74]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>

<P><STRONG><a name="[73]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>

<P><STRONG><a name="[70]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[5f]"></a>SST25_R_BLOCK</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_flash.o(i.SST25_R_BLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SST25_R_BLOCK &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line_from_flash
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cfg_from_flash
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHZDot
</UL>

<P><STRONG><a name="[75]"></a>SST25_W_BLOCK</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, spi_flash.o(i.SST25_W_BLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SST25_W_BLOCK &rArr; Sector_Erase_4K &rArr; WRSR &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ScrollRefreshLEDScreen</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, led_screen.o(i.ScrollRefreshLEDScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ScrollRefreshLEDScreen &rArr; ShT_LEDBoard_RowShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_RowShiftOut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_ColShiftOut
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
</UL>

<P><STRONG><a name="[62]"></a>ScrollRefreshLEDScreen1</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, led_screen.o(i.ScrollRefreshLEDScreen1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ScrollRefreshLEDScreen1 &rArr; ShT_LEDBoard_RowShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_RowShiftOut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShT_LEDBoard_ColShiftOut
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DispString
</UL>

<P><STRONG><a name="[76]"></a>Sector_Erase_4K</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spi_flash.o(i.Sector_Erase_4K))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sector_Erase_4K &rArr; WRSR &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
</UL>

<P><STRONG><a name="[7a]"></a>ShT_LEDBoard_ColShiftOut</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, led_screen.o(i.ShT_LEDBoard_ColShiftOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ShT_LEDBoard_ColShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen
</UL>

<P><STRONG><a name="[7b]"></a>ShT_LEDBoard_RowShiftOut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, led_screen.o(i.ShT_LEDBoard_RowShiftOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ShT_LEDBoard_RowShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRefreshLEDScreen
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler &rArr; USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, remote.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PolarityConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM5_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_run
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[82]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[81]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>TIM_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>TIM_ICInit</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, stm32f10x_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
</UL>

<P><STRONG><a name="[56]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[7f]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[89]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[8a]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[8b]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[57]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>

<P><STRONG><a name="[c4]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c6]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>

<P><STRONG><a name="[c5]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[8d]"></a>USART_Init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c8]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>

<P><STRONG><a name="[1]"></a>USBH_Connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBH_Disconnected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Disconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[0]"></a>USBH_SOF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>USB_OTG_BSP_TimerIRQ</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimerIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>

<P><STRONG><a name="[a0]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[9f]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>

<P><STRONG><a name="[a2]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
</UL>

<P><STRONG><a name="[8f]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[90]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[9b]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>

<P><STRONG><a name="[9c]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[a3]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[9a]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
</UL>

<P><STRONG><a name="[a1]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>WRDI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_flash.o(i.WRDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRDI &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
</UL>

<P><STRONG><a name="[78]"></a>WREN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_flash.o(i.WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WREN &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
</UL>

<P><STRONG><a name="[77]"></a>WRSR</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi_flash.o(i.WRSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRSR &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
</UL>

<P><STRONG><a name="[a5]"></a>WWDG_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>WWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
</UL>

<P><STRONG><a name="[cc]"></a>WWDG_EnableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
</UL>

<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wwdg.o(i.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_run
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetCounter
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>WWDG_SetCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>WWDG_SetPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
</UL>

<P><STRONG><a name="[ca]"></a>WWDG_SetWindowValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_SetWindowValue))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
</UL>

<P><STRONG><a name="[d8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b0]"></a>add_line_info</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, main.o(i.add_line_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = add_line_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;six_protocal
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_display_type
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rear_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line_from_flash
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;front_process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;five_protocal
</UL>

<P><STRONG><a name="[a8]"></a>alloc_memory</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.alloc_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = alloc_memory &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>cpu_run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.cpu_run))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>cpu_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.cpu_stop))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>data_process</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, main.o(i.data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = data_process &rArr; rear_process &rArr; get_line_name
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;side_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rear_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;front_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>delay_ms</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>five_protocal</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, main.o(i.five_protocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = five_protocal &rArr; add_line_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_line_info
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;side_process
</UL>

<P><STRONG><a name="[84]"></a>flash_run</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.flash_run))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>flash_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.flash_stop))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>front_process</STRONG> (Thumb, 204 bytes, Stack size 88 bytes, main.o(i.front_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = front_process &rArr; add_line_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_line_info
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process
</UL>

<P><STRONG><a name="[64]"></a>get_brake_state</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.get_brake_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_brake_state
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disp_state
</UL>

<P><STRONG><a name="[b2]"></a>get_cfg_from_flash</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, main.o(i.get_cfg_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_cfg_from_flash &rArr; SST25_R_BLOCK &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_R_BLOCK
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>get_disp_state</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, main.o(i.get_disp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = get_disp_state &rArr; refresh_display_type &rArr; add_line_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_display_type
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_right_state
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_left_state
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_brake_state
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>get_left_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.get_left_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_left_state
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disp_state
</UL>

<P><STRONG><a name="[b4]"></a>get_light_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.get_light_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_light_state
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disp_state
</UL>

<P><STRONG><a name="[b6]"></a>get_line_from_flash</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, main.o(i.get_line_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_line_from_flash &rArr; SST25_R_BLOCK &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_R_BLOCK
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line_name
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_line_info
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>get_line_name</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, main.o(i.get_line_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_line_name
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rear_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line_from_flash
</UL>

<P><STRONG><a name="[66]"></a>get_right_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.get_right_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_right_state
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disp_state
</UL>

<P><STRONG><a name="[b8]"></a>gpio_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, main.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = main &rArr; get_disp_state &rArr; refresh_display_type &rArr; add_line_info
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ScrollDispHZ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DispString
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_recv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line_from_flash
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disp_state
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cfg_from_flash
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_run
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_memory
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[a9]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_memory
</UL>

<P><STRONG><a name="[ac]"></a>rear_process</STRONG> (Thumb, 318 bytes, Stack size 120 bytes, main.o(i.rear_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rear_process &rArr; get_line_name
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line_name
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_line_info
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process
</UL>

<P><STRONG><a name="[b5]"></a>refresh_display_type</STRONG> (Thumb, 260 bytes, Stack size 256 bytes, main.o(i.refresh_display_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = refresh_display_type &rArr; add_line_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_line_info
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disp_state
</UL>

<P><STRONG><a name="[bb]"></a>remote_init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, remote.o(i.remote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = remote_init &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>rs485_recv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.rs485_recv))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>side_process</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.side_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = side_process &rArr; six_protocal &rArr; add_line_info
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;six_protocal
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;five_protocal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process
</UL>

<P><STRONG><a name="[c2]"></a>six_protocal</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, main.o(i.six_protocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = six_protocal &rArr; add_line_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_line_info
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;side_process
</UL>

<P><STRONG><a name="[bc]"></a>uart_init</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>uart_irq</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, uart.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>wwdg_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wwdg.o(i.wwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wwdg_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetWindowValue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetPrescaler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetCounter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_EnableIT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[53]"></a>BSP_Delay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_bsp.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[54]"></a>BSP_SetTime</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_bsp.o(i.BSP_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[97]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[98]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[95]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[9d]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[9e]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 976 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[93]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[96]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[94]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[92]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[91]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[7c]"></a>SetSysClockTo72</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[86]"></a>TI1_Config</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[88]"></a>TI2_Config</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
