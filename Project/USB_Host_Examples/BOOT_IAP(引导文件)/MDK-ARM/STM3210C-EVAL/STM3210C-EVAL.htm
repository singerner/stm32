<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM3210C-EVAL\STM3210C-EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM3210C-EVAL\STM3210C-EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Thu Nov 19 17:25:41 2015
<BR><P>
<H3>Maximum Stack Usage =        432 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBH_USR_MSC_Application &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[33a2a0c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33a2a0c]">SysTick_Handler</a><BR>
 <LI><a href="#[33a29d0]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33a29d0]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[924da0]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[924da0]">BusFault_Handler</a><BR>
 <LI><a href="#[924cec]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[924cec]">HardFault_Handler</a><BR>
 <LI><a href="#[924cb0]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[924cb0]">MemManage_Handler</a><BR>
 <LI><a href="#[924b48]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[924b48]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33a2c28]">Reset_Handler</a>
 <LI><a href="#[924c74]">NMI_Handler</a>
 <LI><a href="#[924cec]">HardFault_Handler</a>
 <LI><a href="#[924cb0]">MemManage_Handler</a>
 <LI><a href="#[924da0]">BusFault_Handler</a>
 <LI><a href="#[924b48]">UsageFault_Handler</a>
 <LI><a href="#[924bc0]">SVC_Handler</a>
 <LI><a href="#[924d64]">DebugMon_Handler</a>
 <LI><a href="#[924bfc]">PendSV_Handler</a>
 <LI><a href="#[33a2a0c]">SysTick_Handler</a>
 <LI><a href="#[33a1bc0]">WWDG_IRQHandler</a>
 <LI><a href="#[33a2124]">PVD_IRQHandler</a>
 <LI><a href="#[33a1f80]">TAMPER_IRQHandler</a>
 <LI><a href="#[33a2070]">RTC_IRQHandler</a>
 <LI><a href="#[33a22c8]">FLASH_IRQHandler</a>
 <LI><a href="#[33a20e8]">RCC_IRQHandler</a>
 <LI><a href="#[33a246c]">EXTI0_IRQHandler</a>
 <LI><a href="#[924d28]">EXTI1_IRQHandler</a>
 <LI><a href="#[33a23b8]">EXTI2_IRQHandler</a>
 <LI><a href="#[33a237c]">EXTI3_IRQHandler</a>
 <LI><a href="#[33a2340]">EXTI4_IRQHandler</a>
 <LI><a href="#[33a27b4]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[33a2778]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[33a273c]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[33a2700]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[33a26c4]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[33a2688]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[33a264c]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[33a29d0]">ADC1_2_IRQHandler</a>
 <LI><a href="#[33a28e0]">CAN1_TX_IRQHandler</a>
 <LI><a href="#[33a2994]">CAN1_RX0_IRQHandler</a>
 <LI><a href="#[33a2958]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[33a291c]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[33a2304]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[33a1f44]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[33a1e90]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[33a1ecc]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[33a1f08]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[924b84]">TIM2_IRQHandler</a>
 <LI><a href="#[33a1e18]">TIM3_IRQHandler</a>
 <LI><a href="#[33a1ddc]">TIM4_IRQHandler</a>
 <LI><a href="#[33a2250]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[33a228c]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[33a21d8]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[33a2214]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[33a2034]">SPI1_IRQHandler</a>
 <LI><a href="#[33a1ff8]">SPI2_IRQHandler</a>
 <LI><a href="#[33a1c74]">USART1_IRQHandler</a>
 <LI><a href="#[33a1c38]">USART2_IRQHandler</a>
 <LI><a href="#[33a1bfc]">USART3_IRQHandler</a>
 <LI><a href="#[33a2430]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[33a20ac]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[33a2160]">OTG_FS_WKUP_IRQHandler</a>
 <LI><a href="#[33a1da0]">TIM5_IRQHandler</a>
 <LI><a href="#[33a1fbc]">SPI3_IRQHandler</a>
 <LI><a href="#[33a1cec]">UART4_IRQHandler</a>
 <LI><a href="#[33a1cb0]">UART5_IRQHandler</a>
 <LI><a href="#[33a1d64]">TIM6_IRQHandler</a>
 <LI><a href="#[33a1d28]">TIM7_IRQHandler</a>
 <LI><a href="#[33a2610]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[33a25d4]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[33a2598]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[33a255c]">DMA2_Channel4_IRQHandler</a>
 <LI><a href="#[33a2520]">DMA2_Channel5_IRQHandler</a>
 <LI><a href="#[33a24e4]">ETH_IRQHandler</a>
 <LI><a href="#[33a24a8]">ETH_WKUP_IRQHandler</a>
 <LI><a href="#[33a27f0]">CAN2_TX_IRQHandler</a>
 <LI><a href="#[33a28a4]">CAN2_RX0_IRQHandler</a>
 <LI><a href="#[33a2868]">CAN2_RX1_IRQHandler</a>
 <LI><a href="#[33a282c]">CAN2_SCE_IRQHandler</a>
 <LI><a href="#[924c38]">OTG_FS_IRQHandler</a>
 <LI><a href="#[920d2c]">main</a>
 <LI><a href="#[33a2ca0]">SystemInit</a>
 <LI><a href="#[34fd2a8]">__main</a>
 <LI><a href="#[33a3240]">fputc</a>
 <LI><a href="#[91d9d8]">USBH_USR_Init</a>
 <LI><a href="#[91dbb8]">USBH_USR_DeInit</a>
 <LI><a href="#[91db40]">USBH_USR_DeviceAttached</a>
 <LI><a href="#[91d8ac]">USBH_USR_ResetDevice</a>
 <LI><a href="#[91db04]">USBH_USR_DeviceDisconnected</a>
 <LI><a href="#[91d924]">USBH_USR_OverCurrentDetected</a>
 <LI><a href="#[91da8c]">USBH_USR_DeviceSpeedDetected</a>
 <LI><a href="#[91da50]">USBH_USR_Device_DescAvailable</a>
 <LI><a href="#[91db7c]">USBH_USR_DeviceAddressAssigned</a>
 <LI><a href="#[91dbf4]">USBH_USR_Configuration_DescAvailable</a>
 <LI><a href="#[91d960]">USBH_USR_Manufacturer_String</a>
 <LI><a href="#[91d8e8]">USBH_USR_Product_String</a>
 <LI><a href="#[91d870]">USBH_USR_SerialNum_String</a>
 <LI><a href="#[91da14]">USBH_USR_EnumerationDone</a>
 <LI><a href="#[91d7f8]">USBH_USR_UserInput</a>
 <LI><a href="#[91d99c]">USBH_USR_MSC_Application</a>
 <LI><a href="#[91dac8]">USBH_USR_DeviceNotSupported</a>
 <LI><a href="#[91d834]">USBH_USR_UnrecoveredError</a>
 <LI><a href="#[32e6320]">USBH_SOF</a>
 <LI><a href="#[32e644c]">USBH_Connected</a>
 <LI><a href="#[32e63d4]">USBH_Disconnected</a>
 <LI><a href="#[32dcff0]">USBH_MSC_InterfaceInit</a>
 <LI><a href="#[32dd02c]">USBH_MSC_InterfaceDeInit</a>
 <LI><a href="#[32dd0a4]">USBH_MSC_ClassRequest</a>
 <LI><a href="#[32dd068]">USBH_MSC_Handle</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34fd2a8]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[34f3294]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[34f3168]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34f26a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34f312c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[34f26a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34f303c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[33a2c28]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2a0c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33a2a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33a2a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a29d0]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33a29d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33a29d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2994]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2958]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a291c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a28e0]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a28a4]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2868]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a282c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a27f0]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a27b4]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2778]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a273c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2700]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a26c4]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2688]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a264c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2610]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a25d4]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2598]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a255c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2520]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a24e4]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a24a8]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a246c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2430]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a23b8]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a237c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2340]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2304]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a22c8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a228c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2250]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2214]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a21d8]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2160]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2124]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a20e8]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a20ac]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2070]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a2034]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1ff8]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1fbc]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1f80]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1f44]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1f08]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1ecc]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1e90]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1e18]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1ddc]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1da0]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1d64]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1d28]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1cec]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1cb0]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1c74]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1c38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1bfc]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a1bc0]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34fcfd8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34fce70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[34fcf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[34fcf9c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34fcf60]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34fcf24]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34fcfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[34fcee8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[34fceac]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34fce70]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34fcfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[34f2d30]"></a>__aeabi_uldivmod</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f2358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[34f2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[34f5aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34f26a0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34f312c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[34f3168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[34f2664]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[34f2484]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34f2d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[34f2448]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[34f2358]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34f2d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[34f231c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[91d7bc]"></a>Block_Erase_64K</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spi_flash.o(i.Block_Erase_64K))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Block_Erase_64K &rArr; WRSR &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[91b32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[91b50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[924da0]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[924da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[924da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[91b50c]"></a>Busy_Check</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_flash.o(i.Busy_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
</UL>
<BR>[Called By]<UL><LI><a href="#[91b2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[91b368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Erase_64K
</UL>

<P><STRONG><a name="[924d64]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[924d28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32fxxx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[924ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[924b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[924b0c]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[924d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[924ad0]"></a>EXTI_GetITStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[924d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[339f118]"></a>EXTI_Init</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
</UL>

<P><STRONG><a name="[91d780]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[339c238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[339c6ac]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[339c238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[91d744]"></a>FLASH_ProgramWord</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[339c238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[920cf0]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[920d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[339c238]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[339c6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[91d744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[91d780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[339a618]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
</UL>

<P><STRONG><a name="[923810]"></a>GPIO_Init</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[91d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[91d528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[920de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[9239b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
<LI><a href="#[34fdc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[339a528]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
</UL>

<P><STRONG><a name="[339a4b0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[91d438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBGetState
</UL>

<P><STRONG><a name="[9237d4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[91b2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[91b32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[91b368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[91b458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
<LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Erase_64K
<LI><a href="#[920e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_run
<LI><a href="#[92393c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[923798]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[91b2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[91b32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[91b368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[91b458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
<LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[91d7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Erase_64K
<LI><a href="#[920da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledscreen_off
<LI><a href="#[920e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_stop
<LI><a href="#[920e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
<LI><a href="#[92393c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[9239b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
</UL>

<P><STRONG><a name="[339a384]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[33a318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[34fd4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[34fd500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRegIndex
<LI><a href="#[34fd53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[34fd794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[34fdaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[32e62e4]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[32e635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[32e62a8]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[32e626c]"></a>HCD_GetURB_State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetURB_State))
<BR><BR>[Called By]<UL><LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[32e635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[32df534]"></a>HCD_GetXferCnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetXferCnt))
<BR><BR>[Called By]<UL><LI><a href="#[32dda7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[32e6230]"></a>HCD_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_BSP_ConfigVBUS &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e05d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[32e0614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[32e086c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[32e08e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[32e095c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[920c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[32e61f4]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[32dc1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[32dc21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[32dc294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[32dda04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[32dda7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[32de634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[32de670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[32de6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[32de6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[32de724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[32de760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
</UL>

<P><STRONG><a name="[32e61b8]"></a>HCD_ResetPort</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e31e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[32e4520]"></a>HCD_SubmitRequest</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e0740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[32e464c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[32e4688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[32e60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[32e6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[32e6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[924cec]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[924cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[924cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33a318c]"></a>LCD_Clear</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm3210c_eval_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[34fd578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[34fd5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[34fd6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[91d690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_Init
</UL>

<P><STRONG><a name="[33a3150]"></a>LCD_ClearLine</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm3210c_eval_lcd.o(i.LCD_ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_ClearLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[34fdb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[91d6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ClearTextZone
</UL>

<P><STRONG><a name="[34fdc08]"></a>LCD_CtrlLinesConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm3210c_eval_lcd.o(i.LCD_CtrlLinesConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_CtrlLinesConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[923630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[923810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Setup
</UL>

<P><STRONG><a name="[34fdb54]"></a>LCD_DisplayChar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm3210c_eval_lcd.o(i.LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[34fdaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[91d708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[33a3150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
</UL>

<P><STRONG><a name="[91d708]"></a>LCD_DisplayStringLine</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm3210c_eval_lcd.o(i.LCD_DisplayStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[34fdb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[91d654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[91da14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[91db04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[33a372c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>

<P><STRONG><a name="[34fdaa0]"></a>LCD_DrawChar</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, stm3210c_eval_lcd.o(i.LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[34fd578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[34fd5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[34fd6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[34fdb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[33a3114]"></a>LCD_GetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm3210c_eval_lcd.o(i.LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[91d654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[91d6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ClearTextZone
<LI><a href="#[33a3240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[33a372c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>

<P><STRONG><a name="[91d6cc]"></a>LCD_LOG_ClearTextZone</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_log.o(i.LCD_LOG_ClearTextZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_LOG_ClearTextZone &rArr; LCD_ClearLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33a3114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
<LI><a href="#[33a3150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[33a327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[91db04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
</UL>

<P><STRONG><a name="[33a327c]"></a>LCD_LOG_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcd_log.o(i.LCD_LOG_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[91d690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_Init
<LI><a href="#[91d6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ClearTextZone
</UL>

<P><STRONG><a name="[91d690]"></a>LCD_LOG_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_log.o(i.LCD_LOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_LOG_Init &rArr; LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33a318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[33a327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[91d9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
</UL>

<P><STRONG><a name="[91d654]"></a>LCD_LOG_SetFooter</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, lcd_log.o(i.LCD_LOG_SetFooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LCD_LOG_SetFooter &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[33a30d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[33a3114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[91d9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
</UL>

<P><STRONG><a name="[91d618]"></a>LCD_LOG_SetHeader</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lcd_log.o(i.LCD_LOG_SetHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_LOG_SetHeader &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[91d708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[33a309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[33a30d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[33a3114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
<LI><a href="#[33a3150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[33a318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[91d9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
</UL>

<P><STRONG><a name="[34fd794]"></a>LCD_ReadReg</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm3210c_eval_lcd.o(i.LCD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_ReadReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[91b23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[91b278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[339a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[34fd4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[34fd500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRegIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Setup
</UL>

<P><STRONG><a name="[34fd758]"></a>LCD_SPIConfig</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm3210c_eval_lcd.o(i.LCD_SPIConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_SPIConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91b1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[91b2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[923630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92366c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[923810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[339a528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[3400244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Setup
</UL>

<P><STRONG><a name="[33a30d8]"></a>LCD_SetBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm3210c_eval_lcd.o(i.LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[91d654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
</UL>

<P><STRONG><a name="[34fd6e0]"></a>LCD_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm3210c_eval_lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[34fd53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33a318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[34fdaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[33a309c]"></a>LCD_SetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm3210c_eval_lcd.o(i.LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
</UL>

<P><STRONG><a name="[91d5a0]"></a>LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm3210c_eval_lcd.o(i.LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[91da14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[33a372c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>

<P><STRONG><a name="[34fd668]"></a>LCD_Setup</STRONG> (Thumb, 1030 bytes, Stack size 40 bytes, stm3210c_eval_lcd.o(i.LCD_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_Setup &rArr; LCD_SPIConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34fd53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
<LI><a href="#[34fd794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[34fdc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[34fe1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[91d4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210C_LCD_Init
</UL>

<P><STRONG><a name="[34fd5f0]"></a>LCD_WriteRAM</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm3210c_eval_lcd.o(i.LCD_WriteRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[91b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[91b278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33a318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[34fdaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[34fd578]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm3210c_eval_lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WriteRAM_Prepare &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[34fd4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[34fd500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRegIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[33a318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[34fdaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[34fd53c]"></a>LCD_WriteReg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm3210c_eval_lcd.o(i.LCD_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[91b278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[339a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[34fd4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[34fd500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRegIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Setup
<LI><a href="#[34fd6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[34fd500]"></a>LCD_WriteRegIndex</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm3210c_eval_lcd.o(i.LCD_WriteRegIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[91b278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[339a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[34fd4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[34fd578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[34fd794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[34fd4c4]"></a>LCD_nCS_StartByte</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm3210c_eval_lcd.o(i.LCD_nCS_StartByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[91b278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[339a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRegIndex
<LI><a href="#[34fd53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[34fd578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[34fd794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[924cb0]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[924cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[924cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[924c74]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[92375c]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[9238c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[923900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[923978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DisEnableInterrupt
</UL>

<P><STRONG><a name="[923720]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9238c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[923900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[923978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DisEnableInterrupt
</UL>

<P><STRONG><a name="[9236e4]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[9238c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[924c38]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[924bfc]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9236a8]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9238c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[92366c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9238c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
</UL>

<P><STRONG><a name="[340607c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3400244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[923630]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[91d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[91d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[91d528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[920de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[9239b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
<LI><a href="#[34fdc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[339a348]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3400244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[9235f4]"></a>RCC_OTGFSCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_OTGFSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9238c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[91b458]"></a>RDSR</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_flash.o(i.RDSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[91b41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91b50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
</UL>

<P><STRONG><a name="[91b2b4]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[91d528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
</UL>

<P><STRONG><a name="[91d528]"></a>SPI_Flash_Init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, spi_flash.o(i.SPI_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI_Flash_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91b1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[91b2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[923630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[923810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[91b41c]"></a>SPI_Flash_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_flash.o(i.SPI_Flash_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Flash_ReadByte &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[91b458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
</UL>

<P><STRONG><a name="[91b3e0]"></a>SPI_Flash_SendByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_Flash_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[91b23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[91b278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[91b2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[91b32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[91b368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[91b41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadByte
<LI><a href="#[91b458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSR
<LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Erase_64K
</UL>

<P><STRONG><a name="[3400244]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[339a348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[340607c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
</UL>

<P><STRONG><a name="[91b278]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[34fd4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[34fd500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRegIndex
<LI><a href="#[34fd53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[34fd5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[34fd794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[91b23c]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[34fd794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[91b200]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[34fd4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[34fd500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRegIndex
<LI><a href="#[34fd53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[34fd5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[34fd794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[91b1c4]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91d528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[34fd758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPIConfig
</UL>

<P><STRONG><a name="[91d4ec]"></a>SST25_W_BLOCK</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, spi_flash.o(i.SST25_W_BLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SST25_W_BLOCK &rArr; Sector_Erase_4K &rArr; WRSR &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[91b32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[91b368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRDI
<LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[91b50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
<LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[91d4b0]"></a>STM3210C_LCD_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm3210c_eval_lcd.o(i.STM3210C_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = STM3210C_LCD_Init &rArr; LCD_Setup &rArr; LCD_SPIConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34fd668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[91d9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
</UL>

<P><STRONG><a name="[91d474]"></a>STM_EVAL_LEDInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm3210c_eval.o(i.STM_EVAL_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM_EVAL_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[923630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[923810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91d9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
</UL>

<P><STRONG><a name="[91d438]"></a>STM_EVAL_PBGetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm3210c_eval.o(i.STM_EVAL_PBGetState))
<BR><BR>[Calls]<UL><LI><a href="#[339a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[91d7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UserInput
</UL>

<P><STRONG><a name="[91d3fc]"></a>STM_EVAL_PBInit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm3210c_eval.o(i.STM_EVAL_PBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STM_EVAL_PBInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[923630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92375c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[923810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[339a618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[339f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91d9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
</UL>

<P><STRONG><a name="[924bc0]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[91d3c0]"></a>Sector_Erase_4K</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spi_flash.o(i.Sector_Erase_4K))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sector_Erase_4K &rArr; WRSR &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRSR
<LI><a href="#[91b32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[91b50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[33a2ca0]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33a15e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[924b84]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler &rArr; USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[924a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9235b8]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[92357c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[924a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[923540]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[924a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[923504]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[924a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[9234c8]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[92348c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[32e617c]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbh_hcs.o(i.USBH_Alloc_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[32dcff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[32e4688]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[32e464c]"></a>USBH_BulkSendData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[32e77fc]"></a>USBH_ClrFeature</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32e75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[32ddab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>

<P><STRONG><a name="[32e644c]"></a>USBH_Connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[32e6140]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[32e635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[32e75e0]"></a>USBH_CtlReq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[32e7658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[32e7694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[32e77c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[32e77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>

<P><STRONG><a name="[32e6104]"></a>USBH_CtlSendData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[32e635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[32e60c8]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[32e635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[32e608c]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_DeAllocate_AllChannel))
<BR><BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[32e6410]"></a>USBH_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[920c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[32e63d4]"></a>USBH_Disconnected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Disconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[32e6398]"></a>USBH_ErrorHandle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[32e6050]"></a>USBH_Free_Channel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_Free_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[32dd02c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[32e6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>

<P><STRONG><a name="[32e77c0]"></a>USBH_GetDescriptor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32e75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32e76d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[32e770c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[32e7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[32e7784]"></a>USBH_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[91a06c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[32e7748]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[91a06c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
<LI><a href="#[32e77c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[32e770c]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbh_stdreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32e77c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[32e76d0]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32e77c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[32e635c]"></a>USBH_HandleControl</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[32e6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[32e6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[32e626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[32e62e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[920c3c]"></a>USBH_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_BSP_ConfigVBUS &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9238c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[923900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[9239b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[32e6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[32e6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[920d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32ddab8]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32e77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[32dda7c]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[32df534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
<LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[32dcd98]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ErrorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[32dda40]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, usbh_msc_bot.o(i.USBH_MSC_HandleBOTXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dda7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[32ddab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[32e464c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[32e4688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[32e626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
</UL>
<BR>[Called By]<UL><LI><a href="#[32dc1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[32dc21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[32dda04]"></a>USBH_MSC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_msc_bot.o(i.USBH_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[32de760]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[32de724]"></a>USBH_MSC_Read10</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, usbh_msc_scsi.o(i.USBH_MSC_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dc21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[32de6e8]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[32de6ac]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[32de670]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[32de634]"></a>USBH_MSC_Write10</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.USBH_MSC_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[32dc1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[32e6014]"></a>USBH_Modify_Channel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Modify_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32e56b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[924a94]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e329c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[32e32d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[32e34b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[32e34f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[32e3530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[32e356c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[32e35a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[32e365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[32e3698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[32e36d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[924c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[32e5fd8]"></a>USBH_Open_Channel</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbh_hcs.o(i.USBH_Open_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32e56b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[32dcff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[920bc4]"></a>USBH_Process</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[923888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[32e5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[32e608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[32e617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[32e61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[32e62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[32e635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[32e6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[32e6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[920d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32e6320]"></a>USBH_SOF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[32e7694]"></a>USBH_SetAddress</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32e75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[32e7658]"></a>USBH_SetCfg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32e75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[91dbf4]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91dbb8]"></a>USBH_USR_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91db7c]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceAddressAssigned))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91db40]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_DeviceAttached &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91db04]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; LCD_LOG_ClearTextZone &rArr; LCD_ClearLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ClearTextZone
<LI><a href="#[91d708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91dac8]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91da8c]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91da50]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbh_usr.o(i.USBH_USR_Device_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91da14]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_USR_EnumerationDone &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[91d708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d9d8]"></a>USBH_USR_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_USR_Init &rArr; LCD_LOG_SetFooter &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[91d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[91d4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210C_LCD_Init
<LI><a href="#[91d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[91d654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[91d690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_Init
<LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d99c]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 362 bytes, Stack size 88 bytes, usbh_usr.o(i.USBH_USR_MSC_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = USBH_USR_MSC_Application &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[91d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[91d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[91d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[91d12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[91d744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[91d780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[91d7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Erase_64K
<LI><a href="#[920e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_stop
<LI><a href="#[920e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_run
<LI><a href="#[920e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
<LI><a href="#[34fcee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d960]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d924]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_OverCurrentDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_USR_OverCurrentDetected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d8e8]"></a>USBH_USR_Product_String</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_Product_String &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d8ac]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_ResetDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d870]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_SerialNum_String &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d834]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f5850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[91d7f8]"></a>USBH_USR_UserInput</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_UserInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_USR_UserInput
</UL>
<BR>[Calls]<UL><LI><a href="#[91d438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[9239b4]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_ConfigVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_BSP_ConfigVBUS &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[923630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[923810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[920c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[923978]"></a>USB_OTG_BSP_DisEnableInterrupt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_DisEnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_BSP_DisEnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[923720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[92375c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[920d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92393c]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Calls]<UL><LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[32e08a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[923900]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[923720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[92375c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[920c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[9238c4]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_BSP_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9235f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_OTGFSCLKConfig
<LI><a href="#[92366c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9236a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[9236e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[923720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[92375c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[920c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[924a1c]"></a>USB_OTG_BSP_TimerIRQ</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimerIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[923504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[923540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[92357c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[924b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[923888]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[32e05d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[32e08a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[32e095c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[32e31e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[32e671c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[92384c]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[923b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[32e07b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[32e07f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[32e0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[32e095c]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[923888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[32e0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[32e6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[32e0920]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_BSP_ConfigVBUS &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9239b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[32e07b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[32e07f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[32e0830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[32e08a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[32e31e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[32e3314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[32e6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[32e08e4]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[32e6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[32e08a8]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[923888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[92393c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[32e068c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[32e086c]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[32e6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[32e0830]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_EnableHostInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_EnableHostInt
</UL>
<BR>[Called By]<UL><LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[32e07f4]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[32e07b8]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[32e338c]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[32e35e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[32e3350]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[32dd02c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[32e35e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[32e3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>

<P><STRONG><a name="[32e56b4]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32e5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[32e6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
</UL>

<P><STRONG><a name="[32e0740]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e06c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
<LI><a href="#[32e31ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[32e4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[32e3314]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[32e356c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
</UL>

<P><STRONG><a name="[32e06c8]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsEvenFrame))
<BR><BR>[Called By]<UL><LI><a href="#[32e0740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[32e32d8]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e329c]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e068c]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Called By]<UL><LI><a href="#[32e08a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[32e31e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>

<P><STRONG><a name="[32e3260]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[32e365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[32e3224]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[32e34f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[32e31e8]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[923888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[32e068c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[32e0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[32e356c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[32e61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
</UL>

<P><STRONG><a name="[32e0614]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[32e6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[32e05d8]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[923888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[32e6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[32e31ac]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[32e0740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[32e3530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[32e35a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
</UL>

<P><STRONG><a name="[924b48]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[924b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[924b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[91b368]"></a>WRDI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_flash.o(i.WRDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRDI &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[91b50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
</UL>

<P><STRONG><a name="[91b32c]"></a>WREN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_flash.o(i.WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WREN &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Erase_64K
</UL>

<P><STRONG><a name="[91b2f0]"></a>WRSR</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi_flash.o(i.WRSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WRSR &rArr; Busy_Check &rArr; RDSR &rArr; SPI_Flash_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SendByte
<LI><a href="#[91b50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Busy_Check
<LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sector_Erase_4K
<LI><a href="#[91d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_W_BLOCK
<LI><a href="#[91d7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Erase_64K
</UL>

<P><STRONG><a name="[34f58c8]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f5aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34f588c]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[34f5850]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91d834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[91d870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[91d8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[91d924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_OverCurrentDetected
<LI><a href="#[91d960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[91d9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
<LI><a href="#[91da14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[91da50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[91da8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[91dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[91db04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[91db40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAttached
<LI><a href="#[91dbf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
</UL>

<P><STRONG><a name="[34f1f20]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[34f1ee4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[34f1ea8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[33a4c44]"></a>chk_mounted</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dc1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[32dc21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[32dc294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[33a5220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[91d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[33a4c08]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[91d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[33a507c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[33a516c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[32dc294]"></a>disk_initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_msc_fatfs.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[33a4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[32dc258]"></a>disk_ioctl</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[33a4ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[32dc21c]"></a>disk_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbh_msc_fatfs.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[32de724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[91d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[33a4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33a5220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[32dc1e0]"></a>disk_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[33a4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[33a4e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[32dc1a4]"></a>disk_write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_msc_fatfs.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[32de634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[91d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[33a48c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33a4ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[91d12c]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a48c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[91d0f0]"></a>f_mount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[91d0b4]"></a>f_open</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a471c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[33a4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[33a4f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33a5040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33a50f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[91d078]"></a>f_read</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dc1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[32dc21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[33a4794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33a4c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[33a4e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33a4fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[33a48c0]"></a>f_sync</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dc1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[33a471c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[33a4e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33a4ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[91d12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[920e94]"></a>flash_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.flash_on))
<BR><BR>[Calls]<UL><LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[920e58]"></a>flash_run</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.flash_run))
<BR><BR>[Calls]<UL><LI><a href="#[9237d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[920e1c]"></a>flash_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.flash_stop))
<BR><BR>[Calls]<UL><LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91d99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
<LI><a href="#[920d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33a3240]"></a>fputc</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, lcd_log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fputc &rArr; LCD_LOG_UpdateDisplay &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33a3114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
<LI><a href="#[33a372c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[33a4794]"></a>get_fat</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[91d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[33a4f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[33a507c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[33a516c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[33a51e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[33a471c]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fattime.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[91d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[33a48c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[920de0]"></a>gpio_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[923630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[923810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[920d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[920da4]"></a>ledscreen_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.ledscreen_off))
<BR><BR>[Calls]<UL><LI><a href="#[923798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[920d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[920d2c]"></a>main</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = main &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[920c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[920cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[920da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledscreen_off
<LI><a href="#[920de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[920e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_stop
<LI><a href="#[923978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DisEnableInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[33a4758]"></a>put_fat</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[33a4f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[33a51e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[923b94]"></a>BSP_Delay</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, usb_bsp.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9234c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[923540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[92357c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9235b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
<LI><a href="#[923888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[9239b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
</UL>

<P><STRONG><a name="[91a06c]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, usbh_stdreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[91a030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[32e7784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[32e7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[91a030]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[91a06c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[32e671c]"></a>USBH_HandleEnum</STRONG> (Thumb, 414 bytes, Stack size 96 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[923888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[32e6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[32e61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[32e7658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[32e7694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[32e76d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[32e770c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[32e7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[920bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[32e36d4]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e3698]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e365c]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[32e3260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
<LI><a href="#[32e35e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[32e3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e3620]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1064 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[32e3350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[32e365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[32e35e4]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 976 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[32e3350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[32e338c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[32e365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[32e35a8]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e31ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e356c]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e31e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[32e3314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e3530]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e31ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e34f4]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32e3224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e34b8]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[924a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[32e0ac4]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[32e095c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[32dd0a4]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ClassRequest))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[32dd068]"></a>USBH_MSC_Handle</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, usbh_msc_core.o(i.USBH_MSC_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dcd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
<LI><a href="#[32dda04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[32dda40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[32de670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[32de6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[32de6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[32de760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[32e61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[32e75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
<LI><a href="#[32e77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[32dd02c]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[32e3350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[32e6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[32dcff0]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32e5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[32e617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[33a5220]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = check_fs &rArr; disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dc21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[33a4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[33a51e4]"></a>create_chain</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[33a4794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[33a516c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[33a51a8]"></a>create_name</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33a5040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[33a516c]"></a>dir_next</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33a4c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33a4f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[33a51e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[33a5040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33a50f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[33a50f4]"></a>dir_register</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33a4f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[33a4fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[33a507c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[33a516c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[91d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[33a507c]"></a>dir_seek</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.dir_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_seek &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33a4c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[33a5040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33a50f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[33a5040]"></a>follow_path</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33a507c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[33a516c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[33a51a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[91d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[33a4fc8]"></a>mem_cpy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[33a50f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[33a4f8c]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[33a4ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[33a50f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[33a516c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[33a51a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[33a4f50]"></a>move_window</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dc1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[32dc21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[91d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[33a4758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[33a4794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33a48c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33a4ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[33a5040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33a50f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[33a516c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[33a4f14]"></a>remove_chain</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a4758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[33a4794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[91d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[33a4ed8]"></a>sync</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ff.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[32dc1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[32dc258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[33a4f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33a4f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33a48c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[33a4e9c]"></a>validate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[32dc1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[91d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[33a48c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[33a372c]"></a>LCD_LOG_UpdateDisplay</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lcd_log.o(i.LCD_LOG_UpdateDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_LOG_UpdateDisplay &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteReg &rArr; LCD_WriteRegIndex &rArr; LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[91d708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[33a3114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[33a3240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[33a15e4]"></a>SetSysClockTo72</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[33a2ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[34fe1a8]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm3210c_eval_lcd.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[34fd668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Setup
</UL>

<P><STRONG><a name="[34f5aa8]"></a>_printf_core</STRONG> (Thumb, 1106 bytes, Stack size 128 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f2d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[34f5a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[34f5a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[34f58c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[34f5a6c]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34f5aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34f5a30]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34f5aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
